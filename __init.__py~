from gevent import monkey; monkey.patch_all()
from socketio import socketio_manage
from socketio.server import SocketIOServer
from flask import Flask, request, session
from wellplates import wellPlate_app
from wellplates import WellPlateNamespace
from saxsprofiles import saxsprofiles_app
from saxsprofiles import SAXSProfilesNamespace
from pipelinereport import pipelinereport_app
from pipelinereport import PipelineReportNamespace
from reverse import ReverseProxied
from vbl import vbl
from RedisSession import RedisSessionInterface

app = Flask(__name__)
app.session_interface = RedisSessionInterface()
vbl.init_app(app)
app.wsgi_app = ReverseProxied(app.wsgi_app)
app.secret_key = 'PAWR#$asd%EH'
app.debug = True

app.register_blueprint(wellPlate_app, url_prefix='/wellplates')
app.register_blueprint(saxsprofiles_app, url_prefix='/saxsprofiles')
app.register_blueprint(pipelinereport_app, url_prefix='/pipelinereport')

#attributes = { 'epn': ['default_0001'], 'nicknames': [] }

@app.route("/socket.io/<path:path>")
@vbl.requires_auth
def run_socketio(path):
    print 'email'
    print vbl.current_user['email']
    attributes = { 'epn' : ['default']}
    print path
    socketio_manage(request.environ, {'/wellplates': WellPlateNamespace, '/saxsprofiles':SAXSProfilesNamespace, '/pipelinereport':PipelineReportNamespace}, attributes)
    return ''

if __name__ == '__main__':
    print 'Listening on port 8081 and on port 843 (flash policy server)'
    SocketIOServer(('0.0.0.0', 8081), app,
        resource="socket.io", policy_server=True,
        policy_listener=('0.0.0.0', 10843)).serve_forever()
